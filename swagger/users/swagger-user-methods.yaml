openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
  description: API for managing users including adding, updating, and deleting users.

servers:
  - url: http://localhost:3000/api

security:
  - bearerAuth: []  # Applies Bearer token security globally

paths:
  /api/users:
    post:
      summary: Add a new user
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  # Reference to User schema
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successfully.
                  data:
                    $ref: '#/components/schemas/User'  # Return created user data
        '400':
          description: Validation failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed.
                  validationErrors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Username is required.
                        param:
                          type: string
                          example: username
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Failed to create user.

  /api/users/{id}:
    delete:
      summary: Delete a user by ID
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to delete.
          schema:
            type: string
      responses:
        '200':
          description: User deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User deleted successfully.
        '400':
          description: Invalid user ID.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid user ID provided.
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.
        '403':
          description: Forbidden - you do not have permission to delete this user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: You do not have permission to delete this user.

    put:
      summary: Update user profile
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the user to update.
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'  # Reference to User schema
      responses:
        '200':
          description: User updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User updated successfully.
                  data:
                    $ref: '#/components/schemas/User'  # Return updated user data
        '400':
          description: Validation failed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Validation failed.
                  validationErrors:
                    type: array
                    items:
                      type: object
                      properties:
                        msg:
                          type: string
                          example: Email already exists.
                        param:
                          type: string
                          example: email
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found.

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
          description: The username of the user.
          example: john_doe
        image:
          type: string
          description: URL of the user's profile image.
          example: /uploads/profile.jpg
        email:
          type: string
          format: email
          description: The email of the user, must be unique.
          example: john@example.com
        Title:
          type: string
          description: The title of the user.
          example: Mr.
        resetToken:
          type: string
          description: Token for resetting the user's password.
          example: 12345abcdef
        phone:
          type: string
          description: The phone number of the user.
          example: +1234567890
        password:
          type: string
          description: The password for the user.
          example: Password123
        verified:
          type: boolean
          description: Indicates whether the user is verified.
          default: false
        verificationToken:
          type: string
          description: Token used for verifying the user.
          default: null
          example: verificationToken123
        last_login:
          type: string
          format: date-time
          description: The last login time of the user.
          example: 2024-12-24T10:00:00Z
        created_at:
          type: string
          format: date-time
          description: The date and time when the user was created.
          example: 2024-12-24T10:00:00Z
        role:
          type: string
          enum:
            - admin
            - user
            - owner
            - subAdmin
          description: The role of the user.
          default: user
          example: user
      required:
        - email
        - password
        - role
